

 /**
 * transactionManager(alias:value) PlatformTransactionManager,会根据接入的datasource,来判断是jpa还是jdbc或者其他的TransactionManager
 * PlatformTransactionManager 如果你添加的是 spring-boot-starter-jdbc 依赖，框架会默认注入
 * DataSourceTransactionManager 实例。 如果你添加的是 spring-boot-starter-data-jpa 依赖，框架会默认注入 JpaTransactionManager 实例
 * 	InnoDB存储引擎通过多版本并发控制（MVCC）解决了幻读的问题。
 */
@Transactional(
	transactionManager="",
	propagation = Propagation.REQUIRED, 
	readOnly = true, 
	timeout = 1000, 
	isolation = Isolation.DEFAULT, 
	rollbackFor = Exception.class, 
	rollbackForClassName= {},
	noRollbackFor = IOException.class,
	noRollbackForClassName= {}
)

只读事务：
如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性； 
如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，
在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。
【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】
怎样设置：

对于只读查询，可以指定事务类型为readonly，即只读事务。
由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log。

（1）在JDBC中，指定只读事务的办法为： connection.setReadOnly(true);
（2）在Hibernate中，指定只读事务的办法为： session.setFlushMode(FlushMode.NEVER); 
此时，Hibernate也会为只读事务提供Session方面的一些优化手段
（3）在Spring的Hibernate封装中，指定只读事务的办法为： bean配置文件中，prop属性增加“readOnly”或者用注解方式@Transactional(readOnly=true)
【 if the transaction is marked as read-only, Spring will set the Hibernate Session’s flush mode to FLUSH_NEVER, 
and will set the JDBC transaction to read-only】也就是说在Spring中设置只读事务是利用上面两种方式，
在将事务设置成只读后，相当于将数据库设置成只读数据库，此时若要进行写的操作，会出现错误

PROPAGATION_REQUIRED -- 默认的spring事务传播级别。如果上下文中已经存在事务，那么就加入到事务中执行，如果当前上下文中不存在事务，则新建事务执行。 
PROPAGATION_SUPPORTS -- 如果上下文存在事务，则支持事务加入事务，如果没有事务，则使用非事务的方式执行。 通常是用来处理那些并非原子性的非核心业务逻辑操作
PROPAGATION_MANDATORY -- 要求上下文中必须要存在事务，否则就会抛出异常！配置该方式的传播级别是有效的控制上下文调用代码遗漏添加事务控制的保证手段。 
PROPAGATION_REQUIRES_NEW -- 新建事务，如果当前存在事务，把当前事务挂起。 
							启动一个新的, 不依赖于环境的 "内部" 事务. 这个事务将被完全 commited 或 rolled back 而不依赖于外部事务,它拥有自己的隔离范围, 自己的锁.
							当内部事务开始执行时, 外部事务将被挂起, 内务事务结束时, 外部事务将继续执行. 常用于日志记录,或者交易失败仍需要留痕
PROPAGATION_NOT_SUPPORTED -- 以非事务方式执行操作，如果上下文中存在事务，则挂起事务，执行当前逻辑，结束后恢复上下文的事务。 
PROPAGATION_NEVER -- 以非事务方式执行，如果当前存在事务，则抛出异常。 
PROPAGATION_NESTED -- 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作
					  潜套事务开始执行时, 它将取得一个 savepoint.如果这个嵌套事务失败, 我们将回滚到此 savepoint. 
					  嵌套事务非常重要的是内层事务依赖于外层事务，潜套事务是外部事务的一部分, 只有外部事务结束后它才会被提交。
					  如果外部事务 commit/roll back, 潜套事务也会被 commit/roll back.而内层嵌套事务roll back并不会引起外层事务的roll back。

1、脏读（dirty read）：当一个事务读取另一个事务尚未提交的修改时，产生脏读。
2、不可重复读（non-repeatable read）：同一查询在同一事务中多次进行，由于其他提交事务所做的修改或删除，每次返回不同的结果集，此时发生非重复读。
3、幻像读（phantom read）：同一查询在同一事务中多次进行，由于其他提交事务所做的插入操作，每次返回不同的结果集，此时发生幻像读。

针对上述三种情况，Spring提供了5种事务隔离级别予以解决：

1、DEFAULT默认级别
DEFAULT为数据源（数据库）的默认隔离级别，以目前常用的MySQL为例，默认的隔离级别通常为REPEATABLE_READ。

2、READ_UNCOMMITTED未提交读取级别
这是最低的隔离级别，一个事务能读取到别的事务未提交的更新数据，很不安全，可能出现丢失更新、脏读、不可重复读、幻读。

3、READ_COMMITTED提交读取级别
以操作同一行数据为前提，读事务允许其他读事务和写事务，未提交的写事务禁止其他读事务和写事务。此隔离级别可以防止更新丢失、脏读，但不能防止不可重复读、幻读。此隔离级别可以通过“瞬间共享读锁”和“排他写锁”实现。

4、REPEATABLE_READ可重复读取级别
保证同一事务中先后执行的多次查询将返回同一结果，不受其他事务影响。以操作同一行数据为前提，读事务禁止其他写事务，但允许其他读事务，未提交的写事务禁止其他读事务和写事务。此隔离级别可以防止更新丢失、脏读、不可重复读，但不能防止幻读。 

5、SERIALIZABLE序列化级别
所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰。提供严格的事务隔离，此隔离级别可以防止更新丢失、脏读、不可重复读、幻读。如果仅仅通过“行级锁”是无法实现事务序列化的，必须通过其他机制保证新插入的数据不会被刚执行查询操作的事务访问到。

事务隔离级别	            脏读  不可重复读	幻读
读未提交（READ-UNCOMMITTED）	√	√	√
读提交（READ-COMMITTED）	    ×	√	√
重复读（REPEATABLE-READ）	    ×	×	√
串行化（SERIALIZABLE）     	×	×	×
————————————————
mysql默认 REPEATABLE-READ
oracle数据库支持READ COMMITTED 和 SERIALIZABLE这两种事务隔离级别，默认READ-COMMITTED

注解@ControllerAdvice的类可以拥有@ExceptionHandler, @InitBinder或 @ModelAttribute注解的方法，并且这些方法会被应用到控制器类层次的所有@RequestMapping方法上。
如果全部异常处理返回json，那么可以使用 @RestControllerAdvice 代替 @ControllerAdvice ，这样在方法上就可以不需要添加 @ResponseBody。

jta(Java Transaction API)：atomikos,bitronix
http://www.tianshouzhi.com/api/tutorials/distributed_transaction/386
https://blog.csdn.net/wrs120/article/details/90487727

CSRF概念：CSRF跨站点请求伪造(Cross—Site Request Forgery)，
CSRF攻击攻击原理及过程如下：
       1. 用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；
       2.在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；
       3. 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；
       4. 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；
       5. 浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。 
目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。
（1）验证 HTTP Referer 字段（Referer篡改）
（2）在请求地址中添加 token 并验证（token暴漏）
（3）HTTP 头中自定义属性并验证（ajax局部请求）
