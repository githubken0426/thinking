项目经历:做了什么，怎么做的，做完后的结果
1、项目中的那些是你做的。
2、是否核心成员，自己做还是带领团队做
3、做完后的成长
4、项目交付后的反馈
5、控制项目数量，写规模大的，和岗位匹配的
6、不要写项目名称辨识度低的英文缩写

n年java开发经验，n年互联网行业经验，自认为达到高级工程师水平，希望以后能成长为架构师。
敏捷开发的忠实粉丝，单元测试驱动开发的实践者，会重构代码，良好的编码习惯。
爱看技术书籍。
2年团队管理经验，团队规模5人，团队效率高，队员初级开发水平。但是继续的项目交付能力比较高。
The bin count threshold for using a tree rather than list for a bin.  
Bins are converted to trees when adding an element to a bin with at least this many nodes. 
The value must be greater than 2 and should be at least 8 to mesh with assumptions 
in tree removal about conversion back to plain bins upon shrinkage.

Computes key.hashCode() and spreads (XORs) higher bits of hash to lower.  
Because the table uses power-of-two masking, sets of hashes that vary only in bits above the current mask will always collide. 
(Among known examples are sets of Float keys holding consecutive whole numbers in small tables.)  
So we apply a transform that spreads the impact of higher bits downward. 
There is a tradeoff between speed, utility, and quality of bit-spreading. 
Because many common sets of hashes are already reasonably distributed (so don't benefit from spreading), 
and because we use trees to handle large sets of collisions in bins, 
we just XOR some shifted bits in the cheapest possible way to reduce systematic lossage, 
as well as to incorporate impact of the highest bits that would otherwise never be used in index calculations because of table bounds.

MY EARNED PTO---my earned paid time off
捷信消费超贷项目，后端开发.2018/12~2020/2
项目简介
技术：SpringBoot,Redis,Rabbitmq,Maven,Jpa,Gitlab,Mockito,Powermock,SonarLint，Reviewboard,Jira,Jenkins,SwaggerUI,Kibana,SCRUM
项目是一个消费金融贷款类的前后端分离的h5项目,项目后端使用了SpringBoot+Maven+Jpa;使用Jenkins自动化发布；Reviewboard+Gitlab CodeReview来代码审核；
使用k8s-Kibana来追踪日志；单元测试使用了Mockito,Powermock，覆盖率达到了80%以上.
整个开发团队使用Jira来管理文档和Task及bug,并按照Scrum Sprint的方式小版本的迭代开发。
后端接口遵循Swagger API规范，接口使用了RSA加签验签,并设计开发了通用的Security-sdk,实现接口的request response验证工作.
核心的贷款资质认证接口使用了消息中间件--Rabbitmq,并使用策略模式来发布和监听消息.设计了基于Rabbit MQ 的Retry补偿机制，作为Common Solution提供给替他项目使用。
项目交付后，客户的贷款人数提升十分明显，后期一直在对接第平安，新浪，360等第三方，团队通过敏捷开发，使得整个团队的交付能力得到很大提高；所以整个团队获得了2019 Q2 CEO Award.
也使得我从一个单纯的开发角色，逐渐转换到项目的需求分析，user story task拆分，系统对接等方面，尤其是通过单元测试，代码的review，使得自己对代码的质量有了更清晰的认知。



职责描述:负责Rabbitmq的集成；接口加签验签工具类做成；部分sql优化；code review;第三方接口对接；bug调查；

后期对接第三方客户，客户广告推荐客户，先存入客户信息到db，然后逐条处理数据，
使用了Spring Integration,由于未考虑多节点部署，导致实际开发出来后，达不到预期效果。
1、sql索引失效，数据不一致导致。EXPLAIN PLAN FOR trunc(created)>=TO_DATE('2013-12-14', 'YYYY-MM-DD')
2、消息队列消息丢失。（被别人消费）
3、redies穿透，自动化测试

Sprint：冲刺周期，通俗的讲就是实现一个“小目标”的周期。一般需要 2-6 周时间。
User Story：用户的外在业务需求。拿银行系统来举例的话，一个 Story 可以是用户的存款行为，或者是查询余额等等。也就是所谓的小目标本身。
Task：由 User Story 拆分成的具体开发任务。
Backlog：需求列表，可以看成是小目标的清单。分为 Sprint Backlog 和 Product Backlog。
Daily meeting：每天的站会，用于监控项目进度。有些公司直接称其为 Scrum。
Sprint Review meeting: 冲刺评审会议，让团队成员们演示成果。
Sprint burn down：冲刺燃尽图，说白了就是记录当前周期的需求完成情况。
Release：开发周期完成，项目发布新的可用版本。

产品负责人（Product owner）按照需求优先级来明确出一份 Product Backlog，为项目做出整体排期。
随后在每一个小的迭代周期里，团队会根据计划（Sprint Plan Meeting）确定本周期的 Sprint Backlog，再细化成一个个 Task，分配给团队成员，进行具体开发工作。
每一天，团队成员都会进行 Daily meeting，根据情况更新自己的 Task 状态，整个团队更新 Sprint burn down chart。
当这一周期的 Sprint backlog 全部完成，团队会进行 Spring review meeting，也就是评审会议。
一切顺利的话，会发布出这一版本的 Release，并且进行 Sprint 回顾会议（Sprint Retrospective Meeting）。


Spring security Oauth2 
Same Origin Policy，译为“同源策略”。它是对于客户端脚本（尤其是JavaScript）的重要安全度量标准，其目的在于防止某个文档或者脚本从多个不同“origin”（源）装载
具有相同的Origin，也即是拥有相同的协议、主机地址以及端口。一旦这三项数据中有一项不同，那么该资源就将被认为是从不同的Origin得来的，进而不被允许访问。
CORS是一个W3C标准，全称是"跨域资源共享"（Cross-origin resource sharing）
跨域
X-Mini-App-Token=13927699-27aa-47c3-aae7-12ef888eb371

