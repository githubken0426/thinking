15
0000 0000 0000 0000 0000 0000 0000 1111

0000 0000 0000 0000 0000 0000 0000 1110
2
4
8
-1
源码 1000 0000 0000 0000 0000 0000 0000 0001
反码 1111 1111 1111 1111 1111 1111 1111 1110
补码 1111 1111 1111 1111 1111 1111 1111 1111

0000 0000 0000 0000 0000 0000 0000 1111
1
0000 0000 0000 0000 0000 0000 0000 0001

1 << 16
0000 0000 0000 0001 0000 0000 0000 0000

1 << 8
256
0000 0000 0000 0000 0000 0001 0000 0000

1 << 4
16
0000 0000 0000 0000 0000 0001 0001 0000

1 << 2
4
0000 0000 0000 0000 0000 0000 0000 0100

COUNT_BITS=29；
private static final int RUNNING    = -1 << COUNT_BITS; -536870912


private static final int SHUTDOWN   =  0 << COUNT_BITS; 0
private static final int STOP       =  1 << COUNT_BITS; 536870912
private static final int TIDYING    =  2 << COUNT_BITS; 536870912*2
private static final int TERMINATED =  3 << COUNT_BITS; 536870912*3

1010 0000 0000 0000 0000 0000 0000 0000
1101 1111 1111 1111 1111 1111 1111 1111
1010 0000 0000 0000 0000 0000 0000 0000
|
0000 0000 0000 0000 0000 0000 0000 0000

	 * 1、HashMap的底层数据结构？
	 * 
	 * 2、HashMap的存取原理？
	 key的hash算法，计算出key的hashcode,然后根据table的容量计算出需要插入数组的下标。
	 如果hashcode冲突，计算出的下标相同，数组就会以链表形式存储，如果链表长度大于8且容量大于64，会以红黑树来存储。
	 然后调用put方法，如果table的threshold=加载因子*容量,就会触发table的扩容。
	 * 
	 * 3、Java7和Java8的区别？
	 * 数组——链表，数组+链表+红黑树
	 * 4、为啥会线程不安全？
		put的时候多线程会覆盖值
	 * 5、有什么线程安全的类代替么?
	 * 
	 * 6、默认初始化大小是多少？为啥是这么多？为啥大小都是2的幂？
	 * 
	 * 7、HashMap的扩容方式？负载因子是多少？为什是这么多？	
	 * 
	 * 8、HashMap的主要参数都有哪些？
	 * 
	 * HashMap是怎么处理hash碰撞的？
	 * 
	 * hash的计算规则？
	 



